============================
doctest for 2-matrix_divided.py
============================
``matrix_divided()`` returns a new matrix with all elements scalar divided

==============================
Importing Function:
	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided


Checking with normal value:
	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 2)
	[[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]


Checking with multi digit value
	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 33)
	[[0.03, 0.06, 0.09], [0.12, 0.15, 0.18]]


Checking with float 
	>>> matrix_divided([[2.3, 4.9, 2.8], [6.7, 8.0, 4.5]], 0.7)
	[[3.29, 7.0, 4.0], [9.57, 11.43, 6.43]]


Checking with negative values
	>>> matrix_divided([[-3, 6, 7], [-8, -19, 9]], 4)
	[[-0.75, 1.5, 1.75], [-2.0, -4.75, 2.25]]


Checking with Zero Division

	matrix_divided([[3, 5, 7], [3, 9, 2]], 0)
	Traceback (most recent call last):
	raise ZeroDivisionError("division by zero")
	ZeroDivisionError: division by zeros

Checking with other type>>> 
	>>> matrix_divided([["Tayo", 5, False]], 5)
	Traceback (most recent call last):
    	raise TypeError("matrix must be a matrix (list of lists) of"
	TypeError: matrix must be a matrix (list of lists) ofintegers/floats


Checking with non matching values
	>>> matrix_divided([[2.3, 4.9, 2.8], [6.7, 8.0]], 0.7)
	Traceback (most recent call last):
	raise TypeError("Each row of the matrix must have the same size")
	TypeError: Each row of the matrix must have the same size


Checking with empty list
	>>> matrix_divided([], 4)
	Traceback (most recent call last):
    	raise TypeError("matrix must be a matrix (list of lists) of"
	TypeError: matrix must be a matrix (list of lists) ofintegers/floats



Checking with no divisor
	>>> matrix_divided([[4, 6, 7], [5, 8, 9]])
	Traceback (most recent call last):
	TypeError: matrix_divided() missing 1 required positional argument: 'div'
